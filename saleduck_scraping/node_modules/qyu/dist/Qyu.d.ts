import QyuBase, { QyuInputOptions } from './QyuBase';
import MaybePromise from './utils/MaybePromise';
declare const QyuInvokable: new (opts?: QyuInputOptions) => Qyu;
declare type Qyu = QyuBase & QyuAddMethodType & QyuMapMethodType;
declare type QyuAddMethodType = {
    <JobReturnVal, JobArgs extends any[]>(jobFn: JobFunction<JobReturnVal, JobArgs>, opts?: {
        timeout?: number | null | undefined;
        priority?: number | null | undefined;
    } | undefined | null, ...jobArgs: JobArgs): Promise<JobReturnVal>;
};
declare type QyuMapMethodType = {
    <IterableVal, JobReturnVal>(iterable: Iterable<IterableVal>, iterableMapFn: (item: IterableVal, idx: number) => MaybePromise<JobReturnVal>, opts?: {
        timeout?: number | null | undefined;
        priority?: number | null | undefined;
    } | undefined | null): Promise<JobReturnVal[]>;
};
declare type JobFunction<ReturnVal, FuncArgs extends any[] = any[]> = (...args: FuncArgs) => MaybePromise<ReturnVal>;
export { QyuInvokable as default, QyuInputOptions };
